<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="597.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="11985"><g><title>[ld-2.31.so] (3 samples, 0.03%)</title><rect x="0.0584%" y="485" width="0.0250%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="3"/><text x="0.3084%" y="495.50"></text></g><g><title>[ld-2.31.so] (2 samples, 0.02%)</title><rect x="0.0668%" y="469" width="0.0167%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="2"/><text x="0.3168%" y="479.50"></text></g><g><title>[ld-2.31.so] (4 samples, 0.03%)</title><rect x="0.0584%" y="517" width="0.0334%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="4"/><text x="0.3084%" y="527.50"></text></g><g><title>[ld-2.31.so] (4 samples, 0.03%)</title><rect x="0.0584%" y="501" width="0.0334%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="4"/><text x="0.3084%" y="511.50"></text></g><g><title>[ld-2.31.so] (11 samples, 0.09%)</title><rect x="0.0083%" y="533" width="0.0918%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="11"/><text x="0.2583%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.1001%" y="533" width="0.0250%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="3"/><text x="0.3501%" y="543.50"></text></g><g><title>regex::exec::ExecBuilder::build (2 samples, 0.02%)</title><rect x="0.1085%" y="517" width="0.0167%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="2"/><text x="0.3585%" y="527.50"></text></g><g><title>&lt;qrusty::fixtures::H8 as core::ops::deref::Deref&gt;::deref (10 samples, 0.08%)</title><rect x="0.1252%" y="293" width="0.0834%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="10"/><text x="0.3752%" y="303.50"></text></g><g><title>std::sync::once::Once::call_inner (10 samples, 0.08%)</title><rect x="0.1252%" y="277" width="0.0834%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="10"/><text x="0.3752%" y="287.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (10 samples, 0.08%)</title><rect x="0.1252%" y="261" width="0.0834%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="10"/><text x="0.3752%" y="271.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.08%)</title><rect x="0.1252%" y="245" width="0.0834%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="10"/><text x="0.3752%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.08%)</title><rect x="0.1335%" y="229" width="0.0751%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="9"/><text x="0.3835%" y="239.50"></text></g><g><title>qrusty::util::complex64_from_string (9 samples, 0.08%)</title><rect x="0.1335%" y="213" width="0.0751%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="9"/><text x="0.3835%" y="223.50"></text></g><g><title>regex::re_unicode::Regex::captures (9 samples, 0.08%)</title><rect x="0.1335%" y="197" width="0.0751%" height="15" fill="rgb(206,188,39)" fg:x="16" fg:w="9"/><text x="0.3835%" y="207.50"></text></g><g><title>regex::re_unicode::Regex::captures_read_at (8 samples, 0.07%)</title><rect x="0.1418%" y="181" width="0.0668%" height="15" fill="rgb(217,207,13)" fg:x="17" fg:w="8"/><text x="0.3918%" y="191.50"></text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (8 samples, 0.07%)</title><rect x="0.1418%" y="165" width="0.0668%" height="15" fill="rgb(231,73,38)" fg:x="17" fg:w="8"/><text x="0.3918%" y="175.50"></text></g><g><title>regex::exec::ExecNoSync::captures_nfa (8 samples, 0.07%)</title><rect x="0.1418%" y="149" width="0.0668%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="8"/><text x="0.3918%" y="159.50"></text></g><g><title>regex::exec::ExecNoSync::exec_nfa (8 samples, 0.07%)</title><rect x="0.1418%" y="133" width="0.0668%" height="15" fill="rgb(210,31,41)" fg:x="17" fg:w="8"/><text x="0.3918%" y="143.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec (8 samples, 0.07%)</title><rect x="0.1418%" y="117" width="0.0668%" height="15" fill="rgb(221,200,47)" fg:x="17" fg:w="8"/><text x="0.3918%" y="127.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::backtrack (7 samples, 0.06%)</title><rect x="0.1502%" y="101" width="0.0584%" height="15" fill="rgb(226,26,5)" fg:x="18" fg:w="7"/><text x="0.4002%" y="111.50"></text></g><g><title>qrusty::SparsePauliOp::from_labels (5 samples, 0.04%)</title><rect x="0.2086%" y="293" width="0.0417%" height="15" fill="rgb(249,33,26)" fg:x="25" fg:w="5"/><text x="0.4586%" y="303.50"></text></g><g><title>qrusty::Pauli::new (5 samples, 0.04%)</title><rect x="0.2086%" y="277" width="0.0417%" height="15" fill="rgb(235,183,28)" fg:x="25" fg:w="5"/><text x="0.4586%" y="287.50"></text></g><g><title>regex::re_unicode::Regex::captures (4 samples, 0.03%)</title><rect x="0.2169%" y="261" width="0.0334%" height="15" fill="rgb(221,5,38)" fg:x="26" fg:w="4"/><text x="0.4669%" y="271.50"></text></g><g><title>regex::re_unicode::Regex::captures_read_at (4 samples, 0.03%)</title><rect x="0.2169%" y="245" width="0.0334%" height="15" fill="rgb(247,18,42)" fg:x="26" fg:w="4"/><text x="0.4669%" y="255.50"></text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (4 samples, 0.03%)</title><rect x="0.2169%" y="229" width="0.0334%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="4"/><text x="0.4669%" y="239.50"></text></g><g><title>regex::exec::ExecNoSync::captures_nfa (4 samples, 0.03%)</title><rect x="0.2169%" y="213" width="0.0334%" height="15" fill="rgb(249,31,29)" fg:x="26" fg:w="4"/><text x="0.4669%" y="223.50"></text></g><g><title>regex::exec::ExecNoSync::exec_nfa (4 samples, 0.03%)</title><rect x="0.2169%" y="197" width="0.0334%" height="15" fill="rgb(225,111,53)" fg:x="26" fg:w="4"/><text x="0.4669%" y="207.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec (4 samples, 0.03%)</title><rect x="0.2169%" y="181" width="0.0334%" height="15" fill="rgb(238,160,17)" fg:x="26" fg:w="4"/><text x="0.4669%" y="191.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::backtrack (4 samples, 0.03%)</title><rect x="0.2169%" y="165" width="0.0334%" height="15" fill="rgb(214,148,48)" fg:x="26" fg:w="4"/><text x="0.4669%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,059 samples, 8.84%)</title><rect x="3.4376%" y="229" width="8.8360%" height="15" fill="rgb(232,36,49)" fg:x="412" fg:w="1059"/><text x="3.6876%" y="239.50">&lt;core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,060 samples, 8.84%)</title><rect x="3.4376%" y="245" width="8.8444%" height="15" fill="rgb(209,103,24)" fg:x="412" fg:w="1060"/><text x="3.6876%" y="255.50">&lt;alloc::vec:..</text></g><g><title>__libc_malloc (4 samples, 0.03%)</title><rect x="12.2904%" y="245" width="0.0334%" height="15" fill="rgb(229,88,8)" fg:x="1473" fg:w="4"/><text x="12.5404%" y="255.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.03%)</title><rect x="12.2987%" y="229" width="0.0250%" height="15" fill="rgb(213,181,19)" fg:x="1474" fg:w="3"/><text x="12.5487%" y="239.50"></text></g><g><title>qrusty::Pauli::to_triplets_ffi (1,449 samples, 12.09%)</title><rect x="0.2753%" y="277" width="12.0901%" height="15" fill="rgb(254,191,54)" fg:x="33" fg:w="1449"/><text x="0.5253%" y="287.50">qrusty::Pauli::to_..</text></g><g><title>qrusty::accel::rust_make_data (1,448 samples, 12.08%)</title><rect x="0.2837%" y="261" width="12.0818%" height="15" fill="rgb(241,83,37)" fg:x="34" fg:w="1448"/><text x="0.5337%" y="271.50">qrusty::accel::rus..</text></g><g><title>std::time::Instant::now (4 samples, 0.03%)</title><rect x="12.3321%" y="245" width="0.0334%" height="15" fill="rgb(233,36,39)" fg:x="1478" fg:w="4"/><text x="12.5821%" y="255.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (4 samples, 0.03%)</title><rect x="12.3321%" y="229" width="0.0334%" height="15" fill="rgb(226,3,54)" fg:x="1478" fg:w="4"/><text x="12.5821%" y="239.50"></text></g><g><title>std::sys::unix::time::inner::now (4 samples, 0.03%)</title><rect x="12.3321%" y="213" width="0.0334%" height="15" fill="rgb(245,192,40)" fg:x="1478" fg:w="4"/><text x="12.5821%" y="223.50"></text></g><g><title>__clock_gettime (2 samples, 0.02%)</title><rect x="12.3488%" y="197" width="0.0167%" height="15" fill="rgb(238,167,29)" fg:x="1480" fg:w="2"/><text x="12.5988%" y="207.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.03%)</title><rect x="12.3821%" y="245" width="0.0334%" height="15" fill="rgb(232,182,51)" fg:x="1484" fg:w="4"/><text x="12.6321%" y="255.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.02%)</title><rect x="12.3988%" y="229" width="0.0167%" height="15" fill="rgb(231,60,39)" fg:x="1486" fg:w="2"/><text x="12.6488%" y="239.50"></text></g><g><title>cfree (2 samples, 0.02%)</title><rect x="12.4239%" y="245" width="0.0167%" height="15" fill="rgb(208,69,12)" fg:x="1489" fg:w="2"/><text x="12.6739%" y="255.50"></text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (289 samples, 2.41%)</title><rect x="31.7564%" y="229" width="2.4113%" height="15" fill="rgb(235,93,37)" fg:x="3806" fg:w="289"/><text x="32.0064%" y="239.50">&lt;I..</text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,009 samples, 8.42%)</title><rect x="34.1677%" y="229" width="8.4189%" height="15" fill="rgb(213,116,39)" fg:x="4095" fg:w="1009"/><text x="34.4177%" y="239.50">&lt;sprs::spars..</text></g><g><title>[libc-2.31.so] (497 samples, 4.15%)</title><rect x="42.5866%" y="229" width="4.1469%" height="15" fill="rgb(222,207,29)" fg:x="5104" fg:w="497"/><text x="42.8366%" y="239.50">[libc..</text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="46.6667%" y="213" width="0.0668%" height="15" fill="rgb(206,96,30)" fg:x="5593" fg:w="8"/><text x="46.9167%" y="223.50"></text></g><g><title>__libc_calloc (4 samples, 0.03%)</title><rect x="46.7334%" y="229" width="0.0334%" height="15" fill="rgb(218,138,4)" fg:x="5601" fg:w="4"/><text x="46.9834%" y="239.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.03%)</title><rect x="46.7418%" y="213" width="0.0250%" height="15" fill="rgb(250,191,14)" fg:x="5602" fg:w="3"/><text x="46.9918%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4,125 samples, 34.42%)</title><rect x="12.3655%" y="261" width="34.4180%" height="15" fill="rgb(239,60,40)" fg:x="1482" fg:w="4125"/><text x="12.6155%" y="271.50">core::ops::function::FnOnce::call_once</text></g><g><title>sprs::sparse::binop::csmat_binop (4,116 samples, 34.34%)</title><rect x="12.4406%" y="245" width="34.3429%" height="15" fill="rgb(206,27,48)" fg:x="1491" fg:w="4116"/><text x="12.6906%" y="255.50">sprs::sparse::binop::csmat_binop</text></g><g><title>__libc_malloc (2 samples, 0.02%)</title><rect x="46.7668%" y="229" width="0.0167%" height="15" fill="rgb(225,35,8)" fg:x="5605" fg:w="2"/><text x="47.0168%" y="239.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.02%)</title><rect x="46.7668%" y="213" width="0.0167%" height="15" fill="rgb(250,213,24)" fg:x="5605" fg:w="2"/><text x="47.0168%" y="223.50"></text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (220 samples, 1.84%)</title><rect x="54.9937%" y="213" width="1.8356%" height="15" fill="rgb(247,123,22)" fg:x="6591" fg:w="220"/><text x="55.2437%" y="223.50">&lt;..</text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (406 samples, 3.39%)</title><rect x="56.8294%" y="213" width="3.3876%" height="15" fill="rgb(231,138,38)" fg:x="6811" fg:w="406"/><text x="57.0794%" y="223.50">&lt;sp..</text></g><g><title>[libc-2.31.so] (123 samples, 1.03%)</title><rect x="60.2169%" y="213" width="1.0263%" height="15" fill="rgb(231,145,46)" fg:x="7217" fg:w="123"/><text x="60.4669%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,737 samples, 14.49%)</title><rect x="46.7835%" y="245" width="14.4931%" height="15" fill="rgb(251,118,11)" fg:x="5607" fg:w="1737"/><text x="47.0335%" y="255.50">core::ops::function::F..</text></g><g><title>sprs::sparse::binop::csmat_binop (1,737 samples, 14.49%)</title><rect x="46.7835%" y="229" width="14.4931%" height="15" fill="rgb(217,147,25)" fg:x="5607" fg:w="1737"/><text x="47.0335%" y="239.50">sprs::sparse::binop::c..</text></g><g><title>__libc_calloc (4 samples, 0.03%)</title><rect x="61.2432%" y="213" width="0.0334%" height="15" fill="rgb(247,81,37)" fg:x="7340" fg:w="4"/><text x="61.4932%" y="223.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.03%)</title><rect x="61.2516%" y="197" width="0.0250%" height="15" fill="rgb(209,12,38)" fg:x="7341" fg:w="3"/><text x="61.5016%" y="207.50"></text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (86 samples, 0.72%)</title><rect x="66.2745%" y="197" width="0.7176%" height="15" fill="rgb(227,1,9)" fg:x="7943" fg:w="86"/><text x="66.5245%" y="207.50"></text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (248 samples, 2.07%)</title><rect x="66.9921%" y="197" width="2.0693%" height="15" fill="rgb(248,47,43)" fg:x="8029" fg:w="248"/><text x="67.2421%" y="207.50">&lt;..</text></g><g><title>[libc-2.31.so] (87 samples, 0.73%)</title><rect x="69.0613%" y="197" width="0.7259%" height="15" fill="rgb(221,10,30)" fg:x="8277" fg:w="87"/><text x="69.3113%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="69.7372%" y="181" width="0.0501%" height="15" fill="rgb(210,229,1)" fg:x="8358" fg:w="6"/><text x="69.9872%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,021 samples, 8.52%)</title><rect x="61.2766%" y="229" width="8.5190%" height="15" fill="rgb(222,148,37)" fg:x="7344" fg:w="1021"/><text x="61.5266%" y="239.50">core::ops::f..</text></g><g><title>sprs::sparse::binop::csmat_binop (1,019 samples, 8.50%)</title><rect x="61.2933%" y="213" width="8.5023%" height="15" fill="rgb(234,67,33)" fg:x="7346" fg:w="1019"/><text x="61.5433%" y="223.50">sprs::sparse..</text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (53 samples, 0.44%)</title><rect x="72.9161%" y="181" width="0.4422%" height="15" fill="rgb(247,98,35)" fg:x="8739" fg:w="53"/><text x="73.1661%" y="191.50"></text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (165 samples, 1.38%)</title><rect x="73.3584%" y="181" width="1.3767%" height="15" fill="rgb(247,138,52)" fg:x="8792" fg:w="165"/><text x="73.6084%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (656 samples, 5.47%)</title><rect x="69.7956%" y="213" width="5.4735%" height="15" fill="rgb(213,79,30)" fg:x="8365" fg:w="656"/><text x="70.0456%" y="223.50">core::o..</text></g><g><title>sprs::sparse::binop::csmat_binop (656 samples, 5.47%)</title><rect x="69.7956%" y="197" width="5.4735%" height="15" fill="rgb(246,177,23)" fg:x="8365" fg:w="656"/><text x="70.0456%" y="207.50">sprs::s..</text></g><g><title>[libc-2.31.so] (64 samples, 0.53%)</title><rect x="74.7351%" y="181" width="0.5340%" height="15" fill="rgb(230,62,27)" fg:x="8957" fg:w="64"/><text x="74.9851%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="75.2357%" y="165" width="0.0334%" height="15" fill="rgb(216,154,8)" fg:x="9017" fg:w="4"/><text x="75.4857%" y="175.50"></text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (22 samples, 0.18%)</title><rect x="77.3717%" y="165" width="0.1836%" height="15" fill="rgb(244,35,45)" fg:x="9273" fg:w="22"/><text x="77.6217%" y="175.50"></text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (125 samples, 1.04%)</title><rect x="77.5553%" y="165" width="1.0430%" height="15" fill="rgb(251,115,12)" fg:x="9295" fg:w="125"/><text x="77.8053%" y="175.50"></text></g><g><title>core::ops::function::FnOnce::call_once (462 samples, 3.85%)</title><rect x="75.2691%" y="197" width="3.8548%" height="15" fill="rgb(240,54,50)" fg:x="9021" fg:w="462"/><text x="75.5191%" y="207.50">core..</text></g><g><title>sprs::sparse::binop::csmat_binop (461 samples, 3.85%)</title><rect x="75.2774%" y="181" width="3.8465%" height="15" fill="rgb(233,84,52)" fg:x="9022" fg:w="461"/><text x="75.5274%" y="191.50">sprs..</text></g><g><title>[libc-2.31.so] (63 samples, 0.53%)</title><rect x="78.5982%" y="165" width="0.5257%" height="15" fill="rgb(207,117,47)" fg:x="9420" fg:w="63"/><text x="78.8482%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="79.0905%" y="149" width="0.0334%" height="15" fill="rgb(249,43,39)" fg:x="9479" fg:w="4"/><text x="79.3405%" y="159.50"></text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (11 samples, 0.09%)</title><rect x="80.8761%" y="149" width="0.0918%" height="15" fill="rgb(209,38,44)" fg:x="9693" fg:w="11"/><text x="81.1261%" y="159.50"></text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (101 samples, 0.84%)</title><rect x="80.9679%" y="149" width="0.8427%" height="15" fill="rgb(236,212,23)" fg:x="9704" fg:w="101"/><text x="81.2179%" y="159.50"></text></g><g><title>core::ops::function::FnOnce::call_once (377 samples, 3.15%)</title><rect x="79.1239%" y="181" width="3.1456%" height="15" fill="rgb(242,79,21)" fg:x="9483" fg:w="377"/><text x="79.3739%" y="191.50">cor..</text></g><g><title>sprs::sparse::binop::csmat_binop (376 samples, 3.14%)</title><rect x="79.1322%" y="165" width="3.1373%" height="15" fill="rgb(211,96,35)" fg:x="9484" fg:w="376"/><text x="79.3822%" y="175.50">spr..</text></g><g><title>[libc-2.31.so] (55 samples, 0.46%)</title><rect x="81.8106%" y="149" width="0.4589%" height="15" fill="rgb(253,215,40)" fg:x="9805" fg:w="55"/><text x="82.0606%" y="159.50"></text></g><g><title>[unknown] (12 samples, 0.10%)</title><rect x="82.1694%" y="133" width="0.1001%" height="15" fill="rgb(211,81,21)" fg:x="9848" fg:w="12"/><text x="82.4194%" y="143.50"></text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (7 samples, 0.06%)</title><rect x="83.9299%" y="133" width="0.0584%" height="15" fill="rgb(208,190,38)" fg:x="10059" fg:w="7"/><text x="84.1799%" y="143.50"></text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.66%)</title><rect x="83.9883%" y="133" width="0.6592%" height="15" fill="rgb(235,213,38)" fg:x="10066" fg:w="79"/><text x="84.2383%" y="143.50"></text></g><g><title>core::ops::function::FnOnce::call_once (354 samples, 2.95%)</title><rect x="82.2695%" y="165" width="2.9537%" height="15" fill="rgb(237,122,38)" fg:x="9860" fg:w="354"/><text x="82.5195%" y="175.50">cor..</text></g><g><title>sprs::sparse::binop::csmat_binop (353 samples, 2.95%)</title><rect x="82.2778%" y="149" width="2.9453%" height="15" fill="rgb(244,218,35)" fg:x="9861" fg:w="353"/><text x="82.5278%" y="159.50">sp..</text></g><g><title>[libc-2.31.so] (69 samples, 0.58%)</title><rect x="84.6475%" y="133" width="0.5757%" height="15" fill="rgb(240,68,47)" fg:x="10145" fg:w="69"/><text x="84.8975%" y="143.50"></text></g><g><title>[unknown] (31 samples, 0.26%)</title><rect x="84.9645%" y="117" width="0.2587%" height="15" fill="rgb(210,16,53)" fg:x="10183" fg:w="31"/><text x="85.2145%" y="127.50"></text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (4 samples, 0.03%)</title><rect x="86.5081%" y="117" width="0.0334%" height="15" fill="rgb(235,124,12)" fg:x="10368" fg:w="4"/><text x="86.7581%" y="127.50"></text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 0.72%)</title><rect x="86.5415%" y="117" width="0.7176%" height="15" fill="rgb(224,169,11)" fg:x="10372" fg:w="86"/><text x="86.7915%" y="127.50"></text></g><g><title>[libc-2.31.so] (65 samples, 0.54%)</title><rect x="87.2591%" y="117" width="0.5423%" height="15" fill="rgb(250,166,2)" fg:x="10458" fg:w="65"/><text x="87.5091%" y="127.50"></text></g><g><title>[unknown] (30 samples, 0.25%)</title><rect x="87.5511%" y="101" width="0.2503%" height="15" fill="rgb(242,216,29)" fg:x="10493" fg:w="30"/><text x="87.8011%" y="111.50"></text></g><g><title>core::ops::function::FnOnce::call_once (310 samples, 2.59%)</title><rect x="85.2232%" y="149" width="2.5866%" height="15" fill="rgb(230,116,27)" fg:x="10214" fg:w="310"/><text x="85.4732%" y="159.50">co..</text></g><g><title>sprs::sparse::binop::csmat_binop (310 samples, 2.59%)</title><rect x="85.2232%" y="133" width="2.5866%" height="15" fill="rgb(228,99,48)" fg:x="10214" fg:w="310"/><text x="85.4732%" y="143.50">sp..</text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (4 samples, 0.03%)</title><rect x="89.2282%" y="101" width="0.0334%" height="15" fill="rgb(253,11,6)" fg:x="10694" fg:w="4"/><text x="89.4782%" y="111.50"></text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.49%)</title><rect x="89.2616%" y="101" width="0.4923%" height="15" fill="rgb(247,143,39)" fg:x="10698" fg:w="59"/><text x="89.5116%" y="111.50"></text></g><g><title>[libc-2.31.so] (110 samples, 0.92%)</title><rect x="89.7539%" y="101" width="0.9178%" height="15" fill="rgb(236,97,10)" fg:x="10757" fg:w="110"/><text x="90.0039%" y="111.50"></text></g><g><title>[unknown] (74 samples, 0.62%)</title><rect x="90.0542%" y="85" width="0.6174%" height="15" fill="rgb(233,208,19)" fg:x="10793" fg:w="74"/><text x="90.3042%" y="95.50"></text></g><g><title>core::ops::function::FnOnce::call_once (344 samples, 2.87%)</title><rect x="87.8098%" y="133" width="2.8703%" height="15" fill="rgb(216,164,2)" fg:x="10524" fg:w="344"/><text x="88.0598%" y="143.50">co..</text></g><g><title>sprs::sparse::binop::csmat_binop (344 samples, 2.87%)</title><rect x="87.8098%" y="117" width="2.8703%" height="15" fill="rgb(220,129,5)" fg:x="10524" fg:w="344"/><text x="88.0598%" y="127.50">sp..</text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (2 samples, 0.02%)</title><rect x="91.6312%" y="85" width="0.0167%" height="15" fill="rgb(242,17,10)" fg:x="10982" fg:w="2"/><text x="91.8812%" y="95.50"></text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 0.63%)</title><rect x="91.6479%" y="85" width="0.6341%" height="15" fill="rgb(242,107,0)" fg:x="10984" fg:w="76"/><text x="91.8979%" y="95.50"></text></g><g><title>[libc-2.31.so] (89 samples, 0.74%)</title><rect x="92.2820%" y="85" width="0.7426%" height="15" fill="rgb(251,28,31)" fg:x="11060" fg:w="89"/><text x="92.5320%" y="95.50"></text></g><g><title>[unknown] (62 samples, 0.52%)</title><rect x="92.5073%" y="69" width="0.5173%" height="15" fill="rgb(233,223,10)" fg:x="11087" fg:w="62"/><text x="92.7573%" y="79.50"></text></g><g><title>core::ops::function::FnOnce::call_once (286 samples, 2.39%)</title><rect x="90.6800%" y="117" width="2.3863%" height="15" fill="rgb(215,21,27)" fg:x="10868" fg:w="286"/><text x="90.9300%" y="127.50">co..</text></g><g><title>sprs::sparse::binop::csmat_binop (286 samples, 2.39%)</title><rect x="90.6800%" y="101" width="2.3863%" height="15" fill="rgb(232,23,21)" fg:x="10868" fg:w="286"/><text x="90.9300%" y="111.50">sp..</text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="93.0246%" y="85" width="0.0417%" height="15" fill="rgb(244,5,23)" fg:x="11149" fg:w="5"/><text x="93.2746%" y="95.50"></text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.45%)</title><rect x="94.0342%" y="69" width="0.4506%" height="15" fill="rgb(226,81,46)" fg:x="11270" fg:w="54"/><text x="94.2842%" y="79.50"></text></g><g><title>core::ops::function::FnOnce::call_once (256 samples, 2.14%)</title><rect x="93.0663%" y="101" width="2.1360%" height="15" fill="rgb(247,70,30)" fg:x="11154" fg:w="256"/><text x="93.3163%" y="111.50">c..</text></g><g><title>sprs::sparse::binop::csmat_binop (256 samples, 2.14%)</title><rect x="93.0663%" y="85" width="2.1360%" height="15" fill="rgb(212,68,19)" fg:x="11154" fg:w="256"/><text x="93.3163%" y="95.50">s..</text></g><g><title>[libc-2.31.so] (86 samples, 0.72%)</title><rect x="94.4848%" y="69" width="0.7176%" height="15" fill="rgb(240,187,13)" fg:x="11324" fg:w="86"/><text x="94.7348%" y="79.50"></text></g><g><title>[unknown] (68 samples, 0.57%)</title><rect x="94.6350%" y="53" width="0.5674%" height="15" fill="rgb(223,113,26)" fg:x="11342" fg:w="68"/><text x="94.8850%" y="63.50"></text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 0.63%)</title><rect x="96.3371%" y="53" width="0.6341%" height="15" fill="rgb(206,192,2)" fg:x="11546" fg:w="76"/><text x="96.5871%" y="63.50"></text></g><g><title>[libc-2.31.so] (225 samples, 1.88%)</title><rect x="96.9712%" y="53" width="1.8773%" height="15" fill="rgb(241,108,4)" fg:x="11622" fg:w="225"/><text x="97.2212%" y="63.50">[..</text></g><g><title>[unknown] (159 samples, 1.33%)</title><rect x="97.5219%" y="37" width="1.3267%" height="15" fill="rgb(247,173,49)" fg:x="11688" fg:w="159"/><text x="97.7719%" y="47.50"></text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::addp (10,370 samples, 86.52%)</title><rect x="12.3655%" y="277" width="86.5248%" height="15" fill="rgb(224,114,35)" fg:x="1482" fg:w="10370"/><text x="12.6155%" y="287.50">qrusty::util::BinaryTreeFold&lt;T&gt;::addp</text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::addp (6,245 samples, 52.11%)</title><rect x="46.7835%" y="261" width="52.1068%" height="15" fill="rgb(245,159,27)" fg:x="5607" fg:w="6245"/><text x="47.0335%" y="271.50">qrusty::util::BinaryTreeFold&lt;T&gt;::addp</text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::addp (4,508 samples, 37.61%)</title><rect x="61.2766%" y="245" width="37.6137%" height="15" fill="rgb(245,172,44)" fg:x="7344" fg:w="4508"/><text x="61.5266%" y="255.50">qrusty::util::BinaryTreeFold&lt;T&gt;::addp</text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::addp (3,487 samples, 29.09%)</title><rect x="69.7956%" y="229" width="29.0947%" height="15" fill="rgb(236,23,11)" fg:x="8365" fg:w="3487"/><text x="70.0456%" y="239.50">qrusty::util::BinaryTreeFold&lt;T&gt;::addp</text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::addp (2,831 samples, 23.62%)</title><rect x="75.2691%" y="213" width="23.6212%" height="15" fill="rgb(205,117,38)" fg:x="9021" fg:w="2831"/><text x="75.5191%" y="223.50">qrusty::util::BinaryTreeFold&lt;T&gt;::addp</text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::addp (2,369 samples, 19.77%)</title><rect x="79.1239%" y="197" width="19.7664%" height="15" fill="rgb(237,72,25)" fg:x="9483" fg:w="2369"/><text x="79.3739%" y="207.50">qrusty::util::BinaryTreeFold&lt;T&gt;..</text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::addp (1,992 samples, 16.62%)</title><rect x="82.2695%" y="181" width="16.6208%" height="15" fill="rgb(244,70,9)" fg:x="9860" fg:w="1992"/><text x="82.5195%" y="191.50">qrusty::util::BinaryTreeFo..</text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::addp (1,638 samples, 13.67%)</title><rect x="85.2232%" y="165" width="13.6671%" height="15" fill="rgb(217,125,39)" fg:x="10214" fg:w="1638"/><text x="85.4732%" y="175.50">qrusty::util::BinaryT..</text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::addp (1,328 samples, 11.08%)</title><rect x="87.8098%" y="149" width="11.0805%" height="15" fill="rgb(235,36,10)" fg:x="10524" fg:w="1328"/><text x="88.0598%" y="159.50">qrusty::util::Bi..</text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::addp (984 samples, 8.21%)</title><rect x="90.6800%" y="133" width="8.2103%" height="15" fill="rgb(251,123,47)" fg:x="10868" fg:w="984"/><text x="90.9300%" y="143.50">qrusty::uti..</text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::addp (698 samples, 5.82%)</title><rect x="93.0663%" y="117" width="5.8239%" height="15" fill="rgb(221,13,13)" fg:x="11154" fg:w="698"/><text x="93.3163%" y="127.50">qrusty:..</text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::addp (442 samples, 3.69%)</title><rect x="95.2023%" y="101" width="3.6879%" height="15" fill="rgb(238,131,9)" fg:x="11410" fg:w="442"/><text x="95.4523%" y="111.50">qrus..</text></g><g><title>core::ops::function::FnOnce::call_once (442 samples, 3.69%)</title><rect x="95.2023%" y="85" width="3.6879%" height="15" fill="rgb(211,50,8)" fg:x="11410" fg:w="442"/><text x="95.4523%" y="95.50">core..</text></g><g><title>sprs::sparse::binop::csmat_binop (442 samples, 3.69%)</title><rect x="95.2023%" y="69" width="3.6879%" height="15" fill="rgb(245,182,24)" fg:x="11410" fg:w="442"/><text x="95.4523%" y="79.50">sprs..</text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="98.8486%" y="53" width="0.0417%" height="15" fill="rgb(242,14,37)" fg:x="11847" fg:w="5"/><text x="99.0986%" y="63.50"></text></g><g><title>&lt;sprs::sparse::vec::NnzOrZip&lt;Ite1,Ite2,N1,N2&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.24%)</title><rect x="99.3992%" y="229" width="0.2420%" height="15" fill="rgb(246,228,12)" fg:x="11913" fg:w="29"/><text x="99.6492%" y="239.50"></text></g><g><title>[libc-2.31.so] (42 samples, 0.35%)</title><rect x="99.6412%" y="229" width="0.3504%" height="15" fill="rgb(213,55,15)" fg:x="11942" fg:w="42"/><text x="99.8912%" y="239.50"></text></g><g><title>[unknown] (27 samples, 0.23%)</title><rect x="99.7664%" y="213" width="0.2253%" height="15" fill="rgb(209,9,3)" fg:x="11957" fg:w="27"/><text x="100.0164%" y="223.50"></text></g><g><title>all (11,985 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="11985"/><text x="0.2500%" y="575.50"></text></g><g><title>test1 (11,985 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="11985"/><text x="0.2500%" y="559.50">test1</text></g><g><title>_start (11,970 samples, 99.87%)</title><rect x="0.1252%" y="533" width="99.8748%" height="15" fill="rgb(220,109,13)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="543.50">_start</text></g><g><title>__libc_start_main (11,970 samples, 99.87%)</title><rect x="0.1252%" y="517" width="99.8748%" height="15" fill="rgb(232,18,1)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="527.50">__libc_start_main</text></g><g><title>main (11,970 samples, 99.87%)</title><rect x="0.1252%" y="501" width="99.8748%" height="15" fill="rgb(215,41,42)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="511.50">main</text></g><g><title>std::rt::lang_start_internal (11,970 samples, 99.87%)</title><rect x="0.1252%" y="485" width="99.8748%" height="15" fill="rgb(224,123,36)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (11,970 samples, 99.87%)</title><rect x="0.1252%" y="469" width="99.8748%" height="15" fill="rgb(240,125,3)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (11,970 samples, 99.87%)</title><rect x="0.1252%" y="453" width="99.8748%" height="15" fill="rgb(205,98,50)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (11,970 samples, 99.87%)</title><rect x="0.1252%" y="437" width="99.8748%" height="15" fill="rgb(205,185,37)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="447.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (11,970 samples, 99.87%)</title><rect x="0.1252%" y="421" width="99.8748%" height="15" fill="rgb(238,207,15)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="431.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (11,970 samples, 99.87%)</title><rect x="0.1252%" y="405" width="99.8748%" height="15" fill="rgb(213,199,42)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (11,970 samples, 99.87%)</title><rect x="0.1252%" y="389" width="99.8748%" height="15" fill="rgb(235,201,11)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (11,970 samples, 99.87%)</title><rect x="0.1252%" y="373" width="99.8748%" height="15" fill="rgb(207,46,11)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="383.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (11,970 samples, 99.87%)</title><rect x="0.1252%" y="357" width="99.8748%" height="15" fill="rgb(241,35,35)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="367.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (11,970 samples, 99.87%)</title><rect x="0.1252%" y="341" width="99.8748%" height="15" fill="rgb(243,32,47)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="351.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11,970 samples, 99.87%)</title><rect x="0.1252%" y="325" width="99.8748%" height="15" fill="rgb(247,202,23)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test1::main (11,970 samples, 99.87%)</title><rect x="0.1252%" y="309" width="99.8748%" height="15" fill="rgb(219,102,11)" fg:x="15" fg:w="11970"/><text x="0.3752%" y="319.50">test1::main</text></g><g><title>qrusty::SparsePauliOp::to_matrix_accel (11,955 samples, 99.75%)</title><rect x="0.2503%" y="293" width="99.7497%" height="15" fill="rgb(243,110,44)" fg:x="30" fg:w="11955"/><text x="0.5003%" y="303.50">qrusty::SparsePauliOp::to_matrix_accel</text></g><g><title>qrusty::util::BinaryTreeFold&lt;T&gt;::end (133 samples, 1.11%)</title><rect x="98.8903%" y="277" width="1.1097%" height="15" fill="rgb(222,74,54)" fg:x="11852" fg:w="133"/><text x="99.1403%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once (133 samples, 1.11%)</title><rect x="98.8903%" y="261" width="1.1097%" height="15" fill="rgb(216,99,12)" fg:x="11852" fg:w="133"/><text x="99.1403%" y="271.50"></text></g><g><title>sprs::sparse::binop::csmat_binop (133 samples, 1.11%)</title><rect x="98.8903%" y="245" width="1.1097%" height="15" fill="rgb(226,22,26)" fg:x="11852" fg:w="133"/><text x="99.1403%" y="255.50"></text></g></svg></svg>